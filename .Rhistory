# This line of code will install all the necessary packages required for the code to run properly and efficiently.
# install.packages(c("abind", "forcats", "ggplot2", "ggradar", "ggrepel", "ggridges", "hrbrthemes", "lubridate", "plotly", "plyr", "purrr", "RColorBrewer", "readr", "scales", "stringr", "tibble", "tidyr", "tidyselect", "tidyverse", "viridis", "viridisLite"))
library(abind) # is used for combining arrays along multiple dimensions.
library(forcats) # is a package for working with categorical variables in R.
library(ggplot2) # is a popular data visualization package for creating complex plots and graphics.
library(ggradar) # is a package for creating radar charts.
library(ggrepel)# is used for avoiding label overlapping in ggplot2.
library(ggridges)# is used for creating ridgeline plots.
library(hrbrthemes) # is a package that provides several themes for ggplot2.
library(lubridate)# s used for working with dates and times in R.
library(plotly) # is a package for creating interactive plots and graphics.
library(plyr) # is a package for splitting, applying, and combining data.
library(purrr) #  is a package for functional programming in R.
library(RColorBrewer) #  is used for creating beautiful and distinct color palettes for maps and plots.
library(readr) #  is used for reading and writing tabular data in R.
library(scales) #  is used for working with scales and color palettes in ggplot2.
library(stringr) # is used for working with strings in R.
library(tibble) # is a package for creating tibbles, a modern re-imagining of data frames.
library(tidyr) # is used for reshaping data in R.
library(tidyselect) # is used for selecting columns of a data frame by name.
library(tidyverse) # is a collection of packages, including ggplot2, dplyr, tidyr, readr, purrr, and tibble, that are designed to work together for data manipulation and visualization.
# viridis and viridisLite are packages for creating color palettes that are friendly to
library(viridis)
library(viridisLite)
library(lubridate)
Data_From_GoogleFit<- read.csv("./Google fit/Daily activity metrics.csv") #Import the data of  my daily  health performance
# This line of code will install all the necessary packages required for the code to run properly and efficiently.
# install.packages(c("abind", "forcats", "ggplot2", "ggradar", "ggrepel", "ggridges", "hrbrthemes", "lubridate", "plotly", "plyr", "purrr", "RColorBrewer", "readr", "scales", "stringr", "tibble", "tidyr", "tidyselect", "tidyverse", "viridis", "viridisLite"))
library(abind) # is used for combining arrays along multiple dimensions.
library(forcats) # is a package for working with categorical variables in R.
library(ggplot2) # is a popular data visualization package for creating complex plots and graphics.
library(ggradar) # is a package for creating radar charts.
library(ggrepel)# is used for avoiding label overlapping in ggplot2.
library(ggridges)# is used for creating ridgeline plots.
library(hrbrthemes) # is a package that provides several themes for ggplot2.
library(lubridate)# s used for working with dates and times in R.
library(plotly) # is a package for creating interactive plots and graphics.
library(plyr) # is a package for splitting, applying, and combining data.
library(purrr) #  is a package for functional programming in R.
library(RColorBrewer) #  is used for creating beautiful and distinct color palettes for maps and plots.
library(readr) #  is used for reading and writing tabular data in R.
library(scales) #  is used for working with scales and color palettes in ggplot2.
library(stringr) # is used for working with strings in R.
library(tibble) # is a package for creating tibbles, a modern re-imagining of data frames.
library(tidyr) # is used for reshaping data in R.
library(tidyselect) # is used for selecting columns of a data frame by name.
library(tidyverse) # is a collection of packages, including ggplot2, dplyr, tidyr, readr, purrr, and tibble, that are designed to work together for data manipulation and visualization.
# viridis and viridisLite are packages for creating color palettes that are friendly to
library(viridis)
library(viridisLite)
library(lubridate)
Data_From_GoogleFit<- read.csv("./Daily activity metrics.csv") #Import the data of  my daily  health performance
glimpse(Data_From_GoogleFit)  # Get an overview about the Data
names(Data_From_GoogleFit) # Discover the Name of 'columns'
Data_From_GoogleFit_v1 <- Data_From_GoogleFit %>%
mutate(weekday= wday(Date,label = TRUE))%>% # Get Weekday from the Date("DD-MM-YYYY") by uinsing the `wday() ` function
select("Distance..m.",weekday,"Calories..kcal.") %>% # select the runned distance, Day of weeks
group_by(weekday) %>%
dplyr::summarize(across( .fns=sum)) #Sum the value of calories and distance of the same day like ` {"Sun":12,"Sat":11,"Sun" : 10}`->  `{"Sun":22,"Sat":11}`
print(Data_From_GoogleFit_v1)
# This function  generates the text label for each data point, and returns  Distance and calorie
Distance_label<-function(distance,calories){
Distance<-round(distance,0)
Distance<-paste(Distance,"M\n")
Calories=round(calories,0)
Calories<-paste(Calories,"Calories")
output=paste(Distance,Calories)
return (output)
}
Global_theme <- function(Ggplot) {
Themed_Graph=Ggplot+  theme_minimal()+ theme( axis.title.y  = element_text(hjust = 0.5,size = 13,face = "bold"),
axis.title.x = element_text(hjust = 0.5,size = 13,face = "bold"),
axis.text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, family = "Arial",face = "bold",size = 17),
legend.background = element_rect(fill = "white",colour = "grey",size = 1),
panel.grid.major = element_line(colour ="grey70" ,size = 0.1), legend.position = "bottom")
return(Themed_Graph)
}
Data_From_GoogleFit_v1_Vis<- ggplot(Data_From_GoogleFit_v1,aes(weekday,Distance..m.,colors=weekday,group=1,label=Distance_label(Distance..m.,Calories..kcal.),fill=weekday))+
geom_point(shape=21,   size=6) +
ylim(0,25000)+
geom_label_repel( color="white",point.padding = 0.50, nudge_x = .85, nudge_y = .15, segment.color="black", segment.size=1,      segment.angle=90, segment.curvature = -1e-20, arrow = arrow(length = unit(0.015, "npc")))+
geom_line( color="grey",size=1.2) +
geom_area(alpha=0.1)+
scale_color_viridis(discrete = TRUE)+
scale_fill_viridis(discrete = TRUE,option = "C") +
guides(fill=guide_legend(title="Days of the  Week"))+
theme(legend.position = "bottom")+
scale_fill_brewer(palette = "Dark2")+
labs(title = "Weekly walking distance of Kheireddine",x="Days",y="Distance in meters")
Data_From_GoogleFit_v1_Vis
Global_theme(Data_From_GoogleFit_v1_Vis)
Walking_duration_Vis<-Data_From_GoogleFit %>%
mutate(weekday= wday(Date,label = TRUE))%>%
mutate(Walking.duration..ms.= round((Walking.duration..ms./100)/60))%>%
select(weekday,Walking.duration..ms.) %>% # select the runned Walking duration and the  Day of weeks
group_by(weekday) %>%
remove_missing()%>%
dplyr::summarize(across( .fns=sum))%>% #Sum the value of walking duration  depends on the days of week
ggplot(aes(x=reorder(weekday,Walking.duration..ms.),y= Walking.duration..ms.,fill=weekday))+geom_col(stat="identity",position='dodge' ,) +coord_flip()+
theme(legend.position = "bottom")+
scale_fill_brewer(palette = "Dark2")+
labs(title = "Kheireddine's Weekly Walking Duration",x="Days of the week ",y="Duration in Minutes")+
geom_text(aes(label = Walking.duration..ms. ),  colour = "black",  position = position_dodge(width = 1),hjust  = -0.5, size = 4)+  theme_bw()
Global_theme(Walking_duration_Vis)
Data_from_GoogleBrowser_v1<- read.csv(file="./Browsing Histroy/BrowserHistory.csv")
# This line of code will install all the necessary packages required for the code to run properly and efficiently.
# install.packages(c("abind", "forcats", "ggplot2", "ggradar", "ggrepel", "ggridges", "hrbrthemes", "lubridate", "plotly", "plyr", "purrr", "RColorBrewer", "readr", "scales", "stringr", "tibble", "tidyr", "tidyselect", "tidyverse", "viridis", "viridisLite"))
library(abind) # is used for combining arrays along multiple dimensions.
library(forcats) # is a package for working with categorical variables in R.
library(ggplot2) # is a popular data visualization package for creating complex plots and graphics.
library(ggradar) # is a package for creating radar charts.
library(ggrepel)# is used for avoiding label overlapping in ggplot2.
library(ggridges)# is used for creating ridgeline plots.
library(hrbrthemes) # is a package that provides several themes for ggplot2.
library(lubridate)# s used for working with dates and times in R.
library(plotly) # is a package for creating interactive plots and graphics.
library(plyr) # is a package for splitting, applying, and combining data.
library(purrr) #  is a package for functional programming in R.
library(RColorBrewer) #  is used for creating beautiful and distinct color palettes for maps and plots.
library(readr) #  is used for reading and writing tabular data in R.
library(scales) #  is used for working with scales and color palettes in ggplot2.
library(stringr) # is used for working with strings in R.
library(tibble) # is a package for creating tibbles, a modern re-imagining of data frames.
library(tidyr) # is used for reshaping data in R.
library(tidyselect) # is used for selecting columns of a data frame by name.
library(tidyverse) # is a collection of packages, including ggplot2, dplyr, tidyr, readr, purrr, and tibble, that are designed to work together for data manipulation and visualization.
# viridis and viridisLite are packages for creating color palettes that are friendly to
library(viridis)
library(viridisLite)
library(lubridate)
Data_From_GoogleFit<- read.csv("./Daily activity metrics.csv") #Import the data of  my daily  health performance
glimpse(Data_From_GoogleFit)  # Get an overview about the Data
names(Data_From_GoogleFit) # Discover the Name of 'columns'
Data_From_GoogleFit_v1 <- Data_From_GoogleFit %>%
mutate(weekday= wday(Date,label = TRUE))%>% # Get Weekday from the Date("DD-MM-YYYY") by uinsing the `wday() ` function
select("Distance..m.",weekday,"Calories..kcal.") %>% # select the runned distance, Day of weeks
group_by(weekday) %>%
dplyr::summarize(across( .fns=sum)) #Sum the value of calories and distance of the same day like ` {"Sun":12,"Sat":11,"Sun" : 10}`->  `{"Sun":22,"Sat":11}`
print(Data_From_GoogleFit_v1)
# This function  generates the text label for each data point, and returns  Distance and calorie
Distance_label<-function(distance,calories){
Distance<-round(distance,0)
Distance<-paste(Distance,"M\n")
Calories=round(calories,0)
Calories<-paste(Calories,"Calories")
output=paste(Distance,Calories)
return (output)
}
Global_theme <- function(Ggplot) {
Themed_Graph=Ggplot+  theme_minimal()+ theme( axis.title.y  = element_text(hjust = 0.5,size = 13,face = "bold"),
axis.title.x = element_text(hjust = 0.5,size = 13,face = "bold"),
axis.text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, family = "Arial",face = "bold",size = 17),
legend.background = element_rect(fill = "white",colour = "grey",size = 1),
panel.grid.major = element_line(colour ="grey70" ,size = 0.1), legend.position = "bottom")
return(Themed_Graph)
}
Data_From_GoogleFit_v1_Vis<- ggplot(Data_From_GoogleFit_v1,aes(weekday,Distance..m.,colors=weekday,group=1,label=Distance_label(Distance..m.,Calories..kcal.),fill=weekday))+
geom_point(shape=21,   size=6) +
ylim(0,25000)+
geom_label_repel( color="white",point.padding = 0.50, nudge_x = .85, nudge_y = .15, segment.color="black", segment.size=1,      segment.angle=90, segment.curvature = -1e-20, arrow = arrow(length = unit(0.015, "npc")))+
geom_line( color="grey",size=1.2) +
geom_area(alpha=0.1)+
scale_color_viridis(discrete = TRUE)+
scale_fill_viridis(discrete = TRUE,option = "C") +
guides(fill=guide_legend(title="Days of the  Week"))+
theme(legend.position = "bottom")+
scale_fill_brewer(palette = "Dark2")+
labs(title = "Weekly walking distance of Kheireddine",x="Days",y="Distance in meters")
Data_From_GoogleFit_v1_Vis
Global_theme(Data_From_GoogleFit_v1_Vis)
Walking_duration_Vis<-Data_From_GoogleFit %>%
mutate(weekday= wday(Date,label = TRUE))%>%
mutate(Walking.duration..ms.= round((Walking.duration..ms./100)/60))%>%
select(weekday,Walking.duration..ms.) %>% # select the runned Walking duration and the  Day of weeks
group_by(weekday) %>%
remove_missing()%>%
dplyr::summarize(across( .fns=sum))%>% #Sum the value of walking duration  depends on the days of week
ggplot(aes(x=reorder(weekday,Walking.duration..ms.),y= Walking.duration..ms.,fill=weekday))+geom_col(stat="identity",position='dodge' ,) +coord_flip()+
theme(legend.position = "bottom")+
scale_fill_brewer(palette = "Dark2")+
labs(title = "Kheireddine's Weekly Walking Duration",x="Days of the week ",y="Duration in Minutes")+
geom_text(aes(label = Walking.duration..ms. ),  colour = "black",  position = position_dodge(width = 1),hjust  = -0.5, size = 4)+  theme_bw()
Global_theme(Walking_duration_Vis)
Data_from_GoogleBrowser_v1<- read.csv(file="./BrowserHistory.csv")
glimpse(Data_from_GoogleBrowser_v1)  # Get an overview about the Data
names(Data_from_GoogleBrowser_v1) # Discover the Name of columns
unique(Data_from_GoogleBrowser_v1$page_transition) # Discover  Categorical Field
Data_from_GoogleBrowser_v2<-Data_from_GoogleBrowser_v1 %>%
mutate(Domain_url= sapply(strsplit(url,"/"), `[`, 3)) %>% # Step 1
mutate(Domain_url= if_else((substr(Domain_url,1,4)!="www."),paste0("www.",Domain_url),Domain_url)) %>% # Step 2
select(Domain_url,page_transition) %>% # Step3
group_by(Domain_url)
Data_from_GoogleBrowser_v2
Data_from_GoogleBrowser_v3<-ddply(Data_from_GoogleBrowser_v2,.(Domain_url,page_transition),nrow) # step 1
glimpse(Data_from_GoogleBrowser_v3) # Show data
Data_from_GoogleBrowser_v4<-Data_from_GoogleBrowser_v3 %>% # Step 2
select(Domain_url,V1) %>%
group_by(Domain_url) %>%
dplyr::summarize(across( .fns=sum))
Top_visited_Websites=Data_from_GoogleBrowser_v4[order(Data_from_GoogleBrowser_v4$V1,decreasing = TRUE),] #Step 3
Top_visited_Websites= Top_visited_Websites[0:6,1] # Step 4
Top_visited_Websites
Top_visited_Websites=t(Top_visited_Websites) #Step 5
Top_visited_Websites
Data_from_GoogleBrowser_v3 =  Data_from_GoogleBrowser_v3[order(Data_from_GoogleBrowser_v3$page_transition,decreasing = TRUE),] # Step1
View(Data_from_GoogleBrowser_v3)
Radar_Chart_data_v1<- Data_from_GoogleBrowser_v3 %>% #Step 2
filter( Domain_url %in%  Top_visited_Websites) %>%
pivot_wider(names_from =page_transition,values_from = V1 )
Radar_Chart_data_v1
Radar_Chart_data_v1[is.na(Radar_Chart_data_v1)]<-0  #Step 3
Radar_Chart_data_v1
Radar_Chart_data_v2<-Radar_Chart_data_v1 %>% #Step 4
group_by(Domain_url) %>%
dplyr::summarize(across(AUTO_TOPLEVEL:TYPED ,.fns =~./sum(across(AUTO_TOPLEVEL:TYPED))))
Radar_Chart_data_v2
Radar_Chart_data_v2 %>%
mutate(Domain_url=str_remove(Domain_url,"www.")) %>% #Step1
ggradar(font.radar = "Circular Air",axis.line.colour = "gray60",legend.title = "Websites",legend.position = "bottom",grid.label.size = 4,axis.label.size=3,group.point.size=4,plot.extent.x.sf=1.2)+ # Step 2
theme(strip.text = element_text(size = 12,colour = "white",margin= margin(t= 5, b=5)), # Step 3
strip.background = element_rect(fill = "#2C3E50"),
legend.position = "bottom",
plot.title =element_text(hjust = 0.5, family = "Arial",face = "bold",size = 17))+
labs(title = "How Kheireddine access to his top website")+
facet_wrap(~Domain_url,ncol=3 )# Step 4
Data_from_GoogleBrowser_v5<-Data_from_GoogleBrowser_v1 %>%
mutate(Domain_url= sapply(strsplit(url,"/"), `[`, 3)) %>%  # Step 1
mutate(Domain_url= if_else((substr(Domain_url,1,4)!="www."),paste0("www.",Domain_url),Domain_url)) %>% # Step 2
mutate(newdate= as.POSIXct(as.numeric(as.character(time_usec/1000000)), origin="1970-01-01", tz="GMT") ) %>% # Step 3
mutate(newdate2= as.Date(newdate,format = "%m/%d/%y")) %>% # Step 4
mutate(Month= month(newdate2,label = TRUE)) %>% # Step 5
select(newdate2,newdate,Domain_url,Month,time_usec)  # Step 6
Data_from_GoogleBrowser_v6<-Data_from_GoogleBrowser_v5 %>%
select(Domain_url,Month) %>% # Step 1
mutate(V1=1) %>% # Step 2
group_by(Domain_url,Month) %>% # Step 3
dplyr::summarise_each( funs(sum)) # Step 4
View(Data_from_GoogleBrowser_v6)
Data_from_GoogleBrowser_v6=Data_from_GoogleBrowser_v6[order(Data_from_GoogleBrowser_v6$V1,decreasing = TRUE),] # Step 5
Data_from_GoogleBrowser_Top_websites=Data_from_GoogleBrowser_v6[0:10 ,1] # Step 6
Graph<-Data_from_GoogleBrowser_v6 %>%
filter(Domain_url %in%  t(Data_from_GoogleBrowser_Top_websites) ) %>% # Step1
ggplot( aes(x=Month, y=V1,color=Domain_url)) +
geom_point(size=4) +
theme_ipsum()+  scale_colour_brewer(palette = "Set1")+
geom_area(alpha=0.1)+
theme(legend.position = "bottom")+
labs(title = "Top 8 visited websites by Kheireddine",x="Months",y="Number of visits")
Global_theme(Graph)
sessionInfo()
